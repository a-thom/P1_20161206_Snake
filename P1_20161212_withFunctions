//Variables
var canvasX = 500;
var canvasY = 300;
var fieldX = 20;
var fieldY = 30;
var fieldSzX = 450;
var fieldSzY = 250;

var direction="r";
var xDir = 1;
var yDir = 0;

var snakeSz = 10;
var snakeX = [fieldX + round(fieldSzX/2/snakeSz)*snakeSz];
var snakeY = [fieldY + round(fieldSzY/2/snakeSz)*snakeSz];

var life = 1;
var speed = 10;
var speedUp = 1;

var foodSz = snakeSz;
var foodX = round(random(fieldX, fieldX+fieldSzX-snakeSz)/snakeSz)*snakeSz;
var foodY = round(random(fieldY, fieldY+fieldSzY-snakeSz)/snakeSz)*snakeSz;

//Settings
rectMode(CORNER);
ellipseMode(CORNER);
frameRate(speed);

//draw playing field
var drawField = function(life){
    background(43, 43, 43);
    stroke(255, 255, 255);
    strokeWeight(1);
    fill(105, 114, 156);
    rect(fieldX, fieldY,fieldSzX, fieldSzY);
    stroke(255, 0, 0);
    fill(255, 0, 0);
    ellipse(foodX, foodY, foodSz, foodSz);
};

var moveSnake = function(){
    if(life === 1){
        if(snakeX[0]+xDir*snakeSz<fieldX || snakeX[0]+xDir*snakeSz>fieldX+fieldSzX-snakeSz || snakeY[0]+yDir*snakeSz<fieldY || snakeY[0]+yDir*snakeSz>fieldY+fieldSzY-snakeSz){
            life = 0;
            xDir = 0;
            yDir = 0;
            gameOver();
        } else {
            //check whether snake is hitting itself
            for (var i=1; i<snakeX.length; i++){
                if (snakeX[0]+xDir*snakeSz===snakeX[i]){
                    if(snakeY[0]+yDir*snakeSz===snakeY[i]){
                        life = 0;
                        xDir = 0;
                        yDir = 0;
                        gameOver();
                    }
                }
            }
            if(life===1){
                //add new first element to snake and delete last element
                snakeX.unshift(snakeX[0]+xDir*snakeSz);
                snakeX.pop();
                snakeY.unshift(snakeY[0]+yDir*snakeSz);
                snakeY.pop();
            }
        }
    }
    for (var i=0; i<=snakeX.length; i++){
        noStroke();
        fill(255, 255, 255);
        //stroke(105, 114, 156);
        rect(snakeX[i], snakeY[i], snakeSz, snakeSz);
    }
    // snake eats food
    if(snakeX[0] === foodX && snakeY[0] === foodY){
        snakeX.unshift(foodX+xDir*snakeSz);
        snakeY.unshift(foodY+yDir*snakeSz);
        //new random parameters for next food bite
        foodX = round(random(fieldX, fieldX+fieldSzX-snakeSz)/snakeSz)*snakeSz;
        foodY = round(random(fieldY, fieldY+fieldSzY-snakeSz)/snakeSz)*snakeSz;
        speed += speedUp;
        frameRate(speed);
    }
};

var gameOver = function(){
    fill(255, 0, 60);
    textSize(34);
    textAlign(CENTER);
    text("game over", fieldX+fieldSzX/2, fieldY+fieldSzY/2);
};

//change direction
var keyPressed = function(){
    if(life ===1){
        //move snake
        switch(keyCode.toString()){
            case "38":
                if(direction !== "d"){
                    direction = "u";
                    xDir = 0;
                    yDir = -1;
                }
            break;
            case "40":
                if(direction !== "u"){
                    direction = "d";
                    xDir = 0;
                    yDir = 1;
                }
            break;
            case "37":
                if(direction !== "r"){
                    direction = "l";
                    xDir = -1;
                    yDir = 0;
                }
            break;
            case "39":
                if(direction !== "l"){
                    direction = "r";
                    xDir = 1;
                    yDir = 0;
                }
            break;
        }
        if(life === 1){
            //check whether the snake is about to hit the edge of the field
            if(snakeX[0]+xDir*snakeSz<fieldX || snakeX[0]+xDir*snakeSz>fieldX+fieldSzX-snakeSz || snakeY[0]+yDir*snakeSz<fieldY || snakeY[0]+yDir*snakeSz>fieldY+fieldSzY-snakeSz){
                life = 0;
                xDir = 0;
                yDir = 0;
                gameOver();
            } else {
                //add new first element to snake and delete last element
                snakeX.unshift(snakeX[0]+xDir*snakeSz);
                snakeX.pop();
                snakeY.unshift(snakeY[0]+yDir*snakeSz);
                snakeY.pop();
            }
        }
        // snake eats food
        if(snakeX[0] === foodX && snakeY[0] === foodY){
            snakeX.unshift(foodX+xDir*snakeSz);
            snakeY.unshift(foodY+yDir*snakeSz);
            //new random parameters for next food bite
            foodX = round(random(fieldX, fieldX+fieldSzX-snakeSz)/snakeSz)*snakeSz;
            foodY = round(random(fieldY, fieldY+fieldSzY-snakeSz)/snakeSz)*snakeSz;
            speed += speedUp;
            frameRate(speed);
        }
    }
};
//animation
var draw= function() {
    
    //draw snake
    drawField(life);
    if(life===0){
        gameOver();
    }
    
    // check whether snake is hitting a wall
    if(life === 1){
        if(snakeX[0]+xDir*snakeSz<fieldX || snakeX[0]+xDir*snakeSz>fieldX+fieldSzX-snakeSz || snakeY[0]+yDir*snakeSz<fieldY || snakeY[0]+yDir*snakeSz>fieldY+fieldSzY-snakeSz){
            life = 0;
            xDir = 0;
            yDir = 0;
            gameOver();
        } else {
            //check whether snake is hitting itself
            for (var i=1; i<snakeX.length; i++){
                if (snakeX[0]+xDir*snakeSz===snakeX[i]){
                    if(snakeY[0]+yDir*snakeSz===snakeY[i]){
                        life = 0;
                        xDir = 0;
                        yDir = 0;
                        gameOver();
                    }
                }
            }
            if(life===1){
                //add new first element to snake and delete last element
                snakeX.unshift(snakeX[0]+xDir*snakeSz);
                snakeX.pop();
                snakeY.unshift(snakeY[0]+yDir*snakeSz);
                snakeY.pop();
            }
        }
    }
    for (var i=0; i<=snakeX.length; i++){
        noStroke();
        fill(255, 255, 255);
        //stroke(105, 114, 156);
        rect(snakeX[i], snakeY[i], snakeSz, snakeSz);
    }
    // snake eats food
    if(snakeX[0] === foodX && snakeY[0] === foodY){
        snakeX.unshift(foodX+xDir*snakeSz);
        snakeY.unshift(foodY+yDir*snakeSz);
        //new random parameters for next food bite
        foodX = round(random(fieldX, fieldX+fieldSzX-snakeSz)/snakeSz)*snakeSz;
        foodY = round(random(fieldY, fieldY+fieldSzY-snakeSz)/snakeSz)*snakeSz;
        speed += speedUp;
        frameRate(speed);
    }
};





